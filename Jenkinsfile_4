pipeline {
    agent any
    environment {
        //All your env required
        DOCKERHUB_CREDENTIALS = credentials('id_hub')
        //git_url *****must be https******
        git_url = 'https://github.com/faniry123/mon_html'
        //branch
        branch_git = 'main'
        //Slack_tokens
        slack_tokens = 'token_slack'
        //Slack_channel
        slackSend_channel = '#slacknotification'
        //front or Back or API
        first_imagename = 'Front'
        //Client Name
        client = 'cg'
        // Language
        second_image_name = 'test_html'
        // Image name
        image_name = '${first_imagename}_${client}_${second_image_name}'
    }
    stages {
        stage('Checkout') {
            steps {
                script {
                    // Checkout the code from the GitHub repository
                    git branch: "${branch_git}", credentialsId: 'GitHub', url: "${git_url}"
                }
            }
            post {
                success {
                    slackSend channel: "${slackSend_channel}", message: "-------------------***************Checkout stage succeeded***************-----------------", teamDomain: 'fanirysiege', tokenCredentialId: "${slack_tokens}", color: 'good', iconEmoji: ':thumbsup:'
                }
                failure {
                    slackSend channel: "${slackSend_channel}", message: "Checkout stage failed", teamDomain: 'fanirysiege', tokenCredentialId: "${slack_tokens}", color: 'danger', iconEmoji: ':thumbsdown:'
                }
            }
        }
        stage('Commiter') {
            steps {
                script {
                    def COMMITTER_EMAIL
                    if (isUnix()) {
                        COMMITTER_EMAIL = sh(script: "git --no-pager show -s --format='%ae'", returnStdout: true).trim()
                    } else {
                        COMMITTER_EMAIL = bat(script: "git --no-pager show -s --format=%%ae", returnStdout: true).split('\r\n')[2].trim()
                    }
                    slackSend channel: "${slackSend_channel}", failOnError: true, message: " (${JOB_NAME}) ${COMMITTER_EMAIL} a initilisé le build numéro ${BUILD_DISPLAY_NAME}", teamDomain: 'fanirysiege', tokenCredentialId: "${slack_tokens}", color: 'good', iconEmoji: ':thumbsup:'
                }
            }
        }
        stage('Login to Docker Hub') {
            steps {
                script {
                    // Log in to Docker Hub using credentials
                    withCredentials([usernamePassword(credentialsId: 'id_hub', usernameVariable: 'DOCKERHUB_CREDENTIALS_USR', passwordVariable: 'DOCKERHUB_CREDENTIALS_PSW')]) {
                        sh "echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin"
                    }
                }
            }
            post('Login to Docker Hub') {
                success {
                    slackSend channel: "${slackSend_channel}", message: "Login to DockerHub  succeeded", teamDomain: 'fanirysiege', tokenCredentialId: "${slack_tokens}", color: 'good', iconEmoji: ':thumbsup:'
                }
                failure {
                    slackSend channel: "${slackSend_channel}", message: "Login to DockerHub  failed", teamDomain: 'fanirysiege', tokenCredentialId: "${slack_tokens}", color: 'danger', iconEmoji: ':thumbsdown:'
                }
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    // Build the Docker image with tags
                    sh "docker build -t faniry123/${image_name}:build_${BUILD_NUMBER} -t constedocker/${image_name} --no-cache ."
                }
            }
            post('Build Docker Image') {
                success {
                    slackSend channel: "${slackSend_channel}", message: "Build Docker Image succeeded", teamDomain: 'fanirysiegek', tokenCredentialId: "${slack_tokens}", color: 'good', iconEmoji: ':thumbsup:'
                }
                failure {
                    slackSend channel: "${slackSend_channel}", message: "Build Docker Image failed", teamDomain: 'fanirysiege', tokenCredentialId: "${slack_tokens}", color: 'danger', iconEmoji: ':thumbsdown:'
                }
            }
        }
        stage('Push Image') {
            steps {
                script {
                    // Push the Docker image with the specific version
                    sh "docker push faniry123/${image_name}"
                    sh "docker push faniry123/${image_name}:build_${BUILD_NUMBER}"
                }
            }
            post {
                success {
                    slackSend channel: "${slackSend_channel}", message: "Push Image succeeded", teamDomain: 'fanirysiege', tokenCredentialId: "${slack_tokens}", color: 'good', iconEmoji: ':thumbsup:'
                }
                failure {
                    slackSend channel: "${slackSend_channel}", message: "Push Image failed", teamDomain: 'fanirysiege', tokenCredentialId: "${slack_tokens}", color: 'danger', iconEmoji: ':thumbsdown:'
                    retry(1) {
                        script {
                            sh "docker push faniry123/${image_name}"
                            sh "docker push faniry123/${image_name}:build_${BUILD_NUMBER}"
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            // Log out of Docker Hub
            sh 'docker logout'
        }
    }
}
