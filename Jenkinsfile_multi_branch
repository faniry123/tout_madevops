pipeline {
    agent any
    environment {
        //All your env required
        DOCKERHUB_CREDENTIALS = 'id_hub'
        //github
        github_username = "faniry123" 
        //Slack_tokens
        slack_tokens = 'token_slack'
        //Slack_channel
        slackSend_channel = '#slacknotification'
        //teamDomain_Slack
        slack_domain = 'fanirysiege'
        //front or Back or API
        tiers = 'front'
        //Client Name
        client = 'ostie'
        //project
        project = 'test_html'
        // Language with env
        language = 'html'
        // Image name
        image_name = "${tiers}_${client}_${project}_${language}"
        //
        DOCKER_TAG_NAME = "${image_name}:${BUILD_NUMBER}"
    }
    stages {
        stage('Commiter') {
            steps {
                script {
                    def COMMITTER_EMAIL
                    if (isUnix()) {
                        COMMITTER_EMAIL = sh(script: "git --no-pager show -s --format='%ae'", returnStdout: true).trim()
                    } else {
                        COMMITTER_EMAIL = bat(script: "git --no-pager show -s --format=%%ae", returnStdout: true).split('\r\n')[2].trim()
                    }
                    slackSend channel: "${slackSend_channel}", failOnError: true, message: "(${JOB_NAME}) ${COMMITTER_EMAIL} a initilisé le build numéro ${BUILD_DISPLAY_NAME}", teamDomain: "${slack_domain}", tokenCredentialId: "${slack_tokens}", color: 'good', iconEmoji: ':thumbsup:'
                }
            }
        }
        stage('Login to Docker Hub') {
            steps {
                script {
                    // Log in to Docker Hub using credentials
                    withCredentials([usernamePassword(credentialsId: "${DOCKERHUB_CREDENTIALS}", usernameVariable: 'DOCKERHUB_CREDENTIALS_USR', passwordVariable: 'DOCKERHUB_CREDENTIALS_PSW')]) {
                        sh "echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin"
                    }
                }
            }
            post('Login to Docker Hub') {
                success {
                    slackSend channel: "${slackSend_channel}", message: "Login to DockerHub  succeeded", teamDomain: "${slack_domain}", tokenCredentialId: "${slack_tokens}", color: 'good', iconEmoji: ':thumbsup:'
                }
                failure {
                    slackSend channel: "${slackSend_channel}", message: "Login to DockerHub  failed", teamDomain: "${slack_domain}", tokenCredentialId: "${slack_tokens}", color: 'danger', iconEmoji: ':thumbsdown:'
                }
            }
        }


        stage('Build Docker Image') {
            if (env.BRANCH_NAME = 'main'){
                steps {
                script {
                    // Build the Docker image with tags
                    sh "docker build --build-arg BUILD_NUMBER=${BUILD_NUMBER} -t ${github_username}/${image_name}:build_${BUILD_NUMBER} -t ${github_username}/${image_name} --no-cache ."
                }
            }
            post('Build Docker Image') {
                success {
                    slackSend channel: "${slackSend_channel}", message: "(${JOB_NAME}) L'image ${DOCKER_TAG_NAME} a été buildé avec réussite!", teamDomain: "${slack_domain}", tokenCredentialId: "${slack_tokens}", color: 'good', iconEmoji: ':thumbsup:'
                }
                failure {
                    slackSend channel: "${slackSend_channel}", message: "(${JOB_NAME}) Le Build de l'image  ${DOCKER_TAG_NAME} est un échec!", teamDomain: "${slack_domain}", tokenCredentialId: "${slack_tokens}", color: 'danger', iconEmoji: ':thumbsdown:'
                }
            }  

            }else{
                echo "error"

            }
        }
            

        stage('Push Image') {
            steps {
                script {
                    // Push the Docker image with the specific version
                    sh "docker push ${github_username}/${image_name}:build_${BUILD_NUMBER}"
                    sh "docker push ${github_username}/${image_name}"
                    
                }
            }
            post {
                success {
                    slackSend channel: "${slackSend_channel}", message: "(${env.JOB_NAME}) l'image  ${DOCKER_TAG_NAME}  est disponible dans Dockehub", teamDomain: "${slack_domain}", tokenCredentialId: "${slack_tokens}", color: 'good', iconEmoji: ':thumbsup:'
                }
                failure {
                    slackSend channel: "${slackSend_channel}", message: "(${env.JOB_NAME}) Le push de l'image  ${DOCKER_TAG_NAME} a échoué !", teamDomain: "${slack_domain}", tokenCredentialId: "${slack_tokens}", color: 'danger', iconEmoji: ':thumbsdown:'
                    retry(1) {
                        sh "docker push ${github_username}/${image_name}:build_${BUILD_NUMBER}"
                        sh "docker push ${github_username}/${image_name}"
                        
                    }
                }
            }
        }

        stage('Cleaning Image') {
            steps {
                script {
                    // Cleaning the Docker image with the specific version
                    echo "${image_name}"
                    sh "docker  rmi -f ${github_username}/${image_name}:build_${BUILD_NUMBER}" 
                    sh "docker  rmi -f ${github_username}/${image_name}"  
                }
            } 
            post {
                success {
                    slackSend channel: "${slackSend_channel}", message: "(${env.JOB_NAME}) La suppression d'image ${DOCKER_TAG_NAME}  est reussi", teamDomain: "${slack_domain}", tokenCredentialId: "${slack_tokens}", color: 'good', iconEmoji: ':thumbsup:'
                }
                failure {
                    slackSend channel: "${slackSend_channel}", message: "(${env.JOB_NAME}) Le suppression d'image ${DOCKER_TAG_NAME} a échoué!", teamDomain: "${slack_domain}", tokenCredentialId: "${slack_tokens}", color: 'danger', iconEmoji: ':thumbsdown:'
                    }
            }
        }
    }
    post {
        always {
            // Log out of Docker Hub
            sh 'docker logout'
            sh "docker  rmi -f ${github_username}/${image_name}:build_${BUILD_NUMBER}"
            sh 'docker image prune -f'
            
        }
    }
}
