pipeline {
    agent any
    environment {
        //All your env required
        DOCKERHUB_CREDENTIALS = credentials('id_hub')
        ma_hub = 'faniry123' 
        //Slack_tokens
        slack_tokens = 'token_slack'
        //Slack_channel
        slackSend_channel = '#slacknotification'
        //teamDomain_Slack
        ma_teamDomain = 'fanirysiege'
        //front or Back or API
        tiers = 'front'
        //Client Name
        client = 'ostie'
        //project
        project = 'test_html'
        // Language with env
        language = 'html'
        // Image name
        image_name = '${tiers}_${client}_${project}_${language}'
    }
    stages {
        stage('Commiter') {
            steps {
                script {
                    def COMMITTER_EMAIL
                    if (isUnix()) {
                        COMMITTER_EMAIL = sh(script: "git --no-pager show -s --format='%ae'", returnStdout: true).trim()
                    } else {
                        COMMITTER_EMAIL = bat(script: "git --no-pager show -s --format=%%ae", returnStdout: true).split('\r\n')[2].trim()
                    }
                    slackSend channel: "${slackSend_channel}", failOnError: true, message: "(${JOB_NAME}) ${COMMITTER_EMAIL} a initilisé le build numéro ${BUILD_DISPLAY_NAME}", teamDomain: "${ma_teamDomain}", tokenCredentialId: "${slack_tokens}", color: 'good', iconEmoji: ':thumbsup:'
                }
            }
        }
        stage('Login to Docker Hub') {
            steps {
                script {
                    // Log in to Docker Hub using credentials
                    withCredentials([usernamePassword(credentialsId: 'DockerHub', usernameVariable: 'DOCKERHUB_CREDENTIALS_USR', passwordVariable: 'DOCKERHUB_CREDENTIALS_PSW')]) {
                        sh "echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin"
                    }
                }
            }
            post('Login to Docker Hub') {
                success {
                    slackSend channel: "${slackSend_channel}", message: "Login to DockerHub  succeeded", teamDomain: "${ma_teamDomain}", tokenCredentialId: "${slack_tokens}", color: 'good', iconEmoji: ':thumbsup:'
                }
                failure {
                    slackSend channel: "${slackSend_channel}", message: "Login to DockerHub  failed", teamDomain: "${ma_teamDomain}", tokenCredentialId: "${slack_tokens}", color: 'danger', iconEmoji: ':thumbsdown:'
                }
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    // Build the Docker image with tags
                    sh "docker build --build-arg BUILD_NUMBER=${BUILD_NUMBER} -t ${ ma_hub}/${image_name}:build_${BUILD_NUMBER} -t ${ ma_hub}/${image_name} --no-cache ."
                }
            }
            post('Build Docker Image') {
                success {
                    slackSend channel: "${slackSend_channel}", message: "${JOB_NAME} Le BUILD ${BUILD_DISPLAY_NAME} de ${COMMITTER_EMAIL} est une réussite!", teamDomain: "${ma_teamDomain}", tokenCredentialId: "${slack_tokens}", color: 'good', iconEmoji: ':thumbsup:'
                }
                failure {
                    slackSend channel: "${slackSend_channel}", message: "${JOB_NAME} Le BUILD ${BUILD_DISPLAY_NAME} de ${COMMITTER_EMAIL} est un échec!", teamDomain: "${ma_teamDomain}", tokenCredentialId: "${slack_tokens}", color: 'danger', iconEmoji: ':thumbsdown:'
                }
            }
        }
        stage('Push Image') {
            steps {
                script {
                    // Push the Docker image with the specific version
                    sh "docker push ${ ma_hub}/${image_name}"
                    sh "docker push ${ ma_hub}/${image_name}:build_${BUILD_NUMBER}"
                }
            }
            post {
                success {
                    slackSend channel: "${slackSend_channel}", message: "${JOB_NAME} L'image $DOCKER_IMAGE_TAG de ${COMMITTER_EMAIL} est disponible dans Dockehub", teamDomain: "${ma_teamDomain}"', tokenCredentialId: "${slack_tokens}", color: 'good', iconEmoji: ':thumbsup:'
                }
                failure {
                    slackSend channel: "${slackSend_channel}", message: "${JOB_NAME} L'image $DOCKER_IMAGE_TAG de ${COMMITTER_EMAIL} a échoué lors du Push vers Docker Hub!", teamDomain: "${ma_teamDomain}", tokenCredentialId: "${slack_tokens}", color: 'danger', iconEmoji: ':thumbsdown:'
                    retry(1) {
                        sh "docker push ${ ma_hub}/${image_name}"
                        sh "docker push ${ ma_hub}/${image_name}:build_${BUILD_NUMBER}"
                    }
                }
            }
        }
    }
    post {
        always {
            // Log out of Docker Hub
            sh 'docker logout'
        }
    }
}
